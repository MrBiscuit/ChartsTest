// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eUgrinJK8Vbi9oGvjJsdgA
// Component: KIJeLHuPcp
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Chart } from "../../../../components/AreaChart"; // plasmic-import: jFWdfe-nU3/codeComponent
import { Tooltip } from "recharts"; // plasmic-import: nwS_5mt7dU/codeComponent
import { YAxis } from "recharts"; // plasmic-import: -tu0_6Szpl/codeComponent
import { XAxis } from "recharts"; // plasmic-import: fMuVWIgbpE/codeComponent
import { Area } from "recharts"; // plasmic-import: XL9Zn0bkiN/codeComponent
import { LineChart } from "recharts"; // plasmic-import: UZIBi4vydE/codeComponent
import { Bar } from "recharts"; // plasmic-import: ScPI9Fe2C5/codeComponent
import { Legend } from "recharts"; // plasmic-import: u-O-0Kdrgu/codeComponent
import { CartesianGrid } from "recharts"; // plasmic-import: UF7W_shDaO/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_local_test.module.css"; // plasmic-import: eUgrinJK8Vbi9oGvjJsdgA/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: KIJeLHuPcp/css

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  responsiveContainer?: p.Flex<"div">;
  cartesianChart?: p.Flex<typeof Chart>;
  tooltip?: p.Flex<typeof Tooltip>;
  yAxis?: p.Flex<typeof YAxis>;
  xAxis?: p.Flex<typeof XAxis>;
  area?: p.Flex<typeof Area>;
  lineChart?: p.Flex<typeof LineChart>;
  bar?: p.Flex<typeof Bar>;
  legend?: p.Flex<typeof Legend>;
  cartesianGrid?: p.Flex<typeof CartesianGrid>;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <div
              data-plasmic-name={"responsiveContainer"}
              data-plasmic-override={overrides.responsiveContainer}
              className={classNames(projectcss.all, sty.responsiveContainer)}
            >
              <Chart
                data-plasmic-name={"cartesianChart"}
                data-plasmic-override={overrides.cartesianChart}
                className={classNames("__wab_instance", sty.cartesianChart)}
                data={[
                  { name: "Page A", uv: 4000, pv: 2400, amt: 2400 },
                  { name: "Page B", uv: 3000, pv: 1398, amt: 2210 },
                  { name: "Page C", uv: 2000, pv: 9800, amt: 2290 },
                  { name: "Page D", uv: 2780, pv: 3908, amt: 2000 },
                  { name: "Page E", uv: 1890, pv: 4800, amt: 2181 },
                  { name: "Page F", uv: 2390, pv: 3800, amt: 2500 },
                  { name: "Page G", uv: 3490, pv: 4300, amt: 2100 }
                ]}
                layout={"horizontal" as const}
                reverseStackOrder={false}
              >
                <Tooltip
                  data-plasmic-name={"tooltip"}
                  data-plasmic-override={overrides.tooltip}
                  className={classNames("__wab_instance", sty.tooltip)}
                  offset={20 as const}
                  separator={" : " as const}
                />

                <YAxis
                  data-plasmic-name={"yAxis"}
                  data-plasmic-override={overrides.yAxis}
                  axisLine={true}
                  className={classNames("__wab_instance", sty.yAxis)}
                  dataKey={"pv" as const}
                  tickLine={true}
                />

                <XAxis
                  data-plasmic-name={"xAxis"}
                  data-plasmic-override={overrides.xAxis}
                  axisLine={true}
                  className={classNames("__wab_instance", sty.xAxis)}
                  dataKey={"name" as const}
                  tickLine={true}
                />

                <Area
                  data-plasmic-name={"area"}
                  data-plasmic-override={overrides.area}
                  className={classNames("__wab_instance", sty.area)}
                  dataKey={"pv" as const}
                  dot={true}
                  fill={"#8638E5" as const}
                  legendType={"line" as const}
                  stroke={"#8638E5" as const}
                  strokeWidth={1.5 as const}
                  type={"natural" as const}
                />

                <LineChart
                  data-plasmic-name={"lineChart"}
                  data-plasmic-override={overrides.lineChart}
                  className={classNames("__wab_instance", sty.lineChart)}
                  dataKey={"uv" as const}
                  dot={true}
                  legendType={"line" as const}
                  stroke={"#165BAA" as const}
                  strokeWidth={1.5 as const}
                  type={"natural" as const}
                />

                <Bar
                  data-plasmic-name={"bar"}
                  data-plasmic-override={overrides.bar}
                  barSize={8 as const}
                  className={classNames("__wab_instance", sty.bar)}
                  dataKey={"amt" as const}
                  fill={"#F765A3" as const}
                  layout={"horizontal" as const}
                  lengendType={"rect" as const}
                  stroke={"#000" as const}
                />

                <Legend
                  data-plasmic-name={"legend"}
                  data-plasmic-override={overrides.legend}
                  align={"right" as const}
                  className={classNames("__wab_instance", sty.legend)}
                  layout={"horizontal" as const}
                  verticalAlign={"top" as const}
                />

                <CartesianGrid
                  data-plasmic-name={"cartesianGrid"}
                  data-plasmic-override={overrides.cartesianGrid}
                  className={classNames("__wab_instance", sty.cartesianGrid)}
                  strokeDasharray={"4 4" as const}
                  vertical={false}
                />
              </Chart>
            </div>
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "responsiveContainer",
    "cartesianChart",
    "tooltip",
    "yAxis",
    "xAxis",
    "area",
    "lineChart",
    "bar",
    "legend",
    "cartesianGrid"
  ],
  responsiveContainer: [
    "responsiveContainer",
    "cartesianChart",
    "tooltip",
    "yAxis",
    "xAxis",
    "area",
    "lineChart",
    "bar",
    "legend",
    "cartesianGrid"
  ],
  cartesianChart: [
    "cartesianChart",
    "tooltip",
    "yAxis",
    "xAxis",
    "area",
    "lineChart",
    "bar",
    "legend",
    "cartesianGrid"
  ],
  tooltip: ["tooltip"],
  yAxis: ["yAxis"],
  xAxis: ["xAxis"],
  area: ["area"],
  lineChart: ["lineChart"],
  bar: ["bar"],
  legend: ["legend"],
  cartesianGrid: ["cartesianGrid"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  responsiveContainer: "div";
  cartesianChart: typeof Chart;
  tooltip: typeof Tooltip;
  yAxis: typeof YAxis;
  xAxis: typeof XAxis;
  area: typeof Area;
  lineChart: typeof LineChart;
  bar: typeof Bar;
  legend: typeof Legend;
  cartesianGrid: typeof CartesianGrid;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    responsiveContainer: makeNodeComponent("responsiveContainer"),
    cartesianChart: makeNodeComponent("cartesianChart"),
    tooltip: makeNodeComponent("tooltip"),
    yAxis: makeNodeComponent("yAxis"),
    xAxis: makeNodeComponent("xAxis"),
    area: makeNodeComponent("area"),
    lineChart: makeNodeComponent("lineChart"),
    bar: makeNodeComponent("bar"),
    legend: makeNodeComponent("legend"),
    cartesianGrid: makeNodeComponent("cartesianGrid"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
